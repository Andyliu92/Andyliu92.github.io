<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>git on 知止堂</title><link>https://comfluter.life/tags/git/</link><description>Recent content in git on 知止堂</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 07 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://comfluter.life/tags/git/index.xml" rel="self" type="application/rss+xml"/><item><title>利用Git Hook实现服务器端文件提交大小限制</title><link>https://comfluter.life/p/%E5%88%A9%E7%94%A8git-hook%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E6%96%87%E4%BB%B6%E6%8F%90%E4%BA%A4%E5%A4%A7%E5%B0%8F%E9%99%90%E5%88%B6/</link><pubDate>Sat, 07 May 2022 00:00:00 +0000</pubDate><guid>https://comfluter.life/p/%E5%88%A9%E7%94%A8git-hook%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E6%96%87%E4%BB%B6%E6%8F%90%E4%BA%A4%E5%A4%A7%E5%B0%8F%E9%99%90%E5%88%B6/</guid><description>利用git hooks，在服务器端每次接收到push的时候进行文件信息检查，若超过限制则拒绝提交。
具体实现：在update hook中对提交的文件进行检查，利用git cat-file 命令递归查询文件树、查询文件大小，若超限则返回1拒绝提交。
# --- Command line refname=&amp;#34;$1&amp;#34; oldrev=&amp;#34;$2&amp;#34; newrev=&amp;#34;$3&amp;#34; # check commit file size &amp;lt; 30MB export maxFileSize=30 # check repo size &amp;lt; 20GB export maxRepoSize=20 # echo &amp;#34;tree sha&amp;#34; tree_sha=`git cat-file -p $newrev | grep tree | awk &amp;#39;{print $2}&amp;#39;` # echo $tree_sha IFS=$&amp;#39;\n\n&amp;#39; # echo &amp;#34;tree info &amp;#34; # git cat-file -p $tree_sha export totalRepoSize=0 check_file_size(){ for line in `git cat-file -p $1`; do # echo &amp;#34;line: $line&amp;#34; file_type=`echo $line | awk &amp;#39;{print $2}&amp;#39;` file_sha=`echo $line | awk &amp;#39;{print $3}&amp;#39;` # echo &amp;#34;file_type: $file_type&amp;#34; # echo &amp;#34;file_sha: $file_sha&amp;#34; if [[ $file_type == &amp;#34;tree&amp;#34; ]];then check_file_size $file_sha else # echo `git cat-file -s $file_sha` # echo $(($maxFileSize * 1024 * 1024)) file_size=`git cat-file -s $file_sha` totalRepoSize=$(($totalRepoSize + $file_size)) if [ $file_size -ge $(($maxFileSize * 1024 * 1024)) ];then file_name=`echo $line | awk &amp;#39;{print $4}&amp;#39;` echo -e &amp;#34;\e[1;31mERROR: File &amp;#39;$file_name&amp;#39; size &amp;gt; $maxFileSizeMB!</description></item><item><title>Git Notes</title><link>https://comfluter.life/p/git-notes/</link><pubDate>Wed, 22 Dec 2021 00:00:00 +0000</pubDate><guid>https://comfluter.life/p/git-notes/</guid><description>Delete branchs local: git branch -d &amp;lt;localBranchName&amp;gt; remote: git push origin --delete &amp;lt;remoteBranchName&amp;gt;</description></item><item><title>Git large file versioning</title><link>https://comfluter.life/p/git-large-file-versioning/</link><pubDate>Mon, 22 Nov 2021 00:00:00 +0000</pubDate><guid>https://comfluter.life/p/git-large-file-versioning/</guid><description>Download git-lfs on https://git-lfs.github.com/, and run the installation package for windows. Once downloaded and installed, set up Git LFS for your user account by running:git lfs install. You only need to run this once per user account. In each Git repository where you want to use Git LFS, select the file types you&amp;rsquo;d like Git LFS to manage (or directly edit your .gitattributes). You can configure additional file extensions at anytime.</description></item></channel></rss>