<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on 知止堂</title><link>https://comfluter.life/tags/python/</link><description>Recent content in Python on 知止堂</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 26 Nov 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://comfluter.life/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Pyspice 学习随记</title><link>https://comfluter.life/p/pyspice-%E5%AD%A6%E4%B9%A0%E9%9A%8F%E8%AE%B0/</link><pubDate>Fri, 26 Nov 2021 00:00:00 +0000</pubDate><guid>https://comfluter.life/p/pyspice-%E5%AD%A6%E4%B9%A0%E9%9A%8F%E8%AE%B0/</guid><description>References PySpice: 使用ngspice进行电路仿真分析-1：安装 PySpice: 使用ngspice进行电路仿真分析-2：ngspice简要介绍-输入文件格式1</description></item><item><title>Numpy 学习随记</title><link>https://comfluter.life/p/numpy-%E5%AD%A6%E4%B9%A0%E9%9A%8F%E8%AE%B0/</link><pubDate>Mon, 22 Nov 2021 00:00:00 +0000</pubDate><guid>https://comfluter.life/p/numpy-%E5%AD%A6%E4%B9%A0%E9%9A%8F%E8%AE%B0/</guid><description>数组切片 import numpy as np a = np.array([[11, 12, 13], [21, 22, 23]], [31, 32, 33]) 注意Numpy中元素编号从0开始，左侧包含右侧不包含
取单个元素x = a[1, 2]，对应第0维的第1个元素4 切片x = a[0:2, 1:3]，对应第0维的第0~1个元素，第1维的第1~2个元素[[12 13], [22 23]] 切片x = a[:2, 2:]，对应对应第0维的最开始到第2（2-1）个元素，第1维的第2个及以后的所有元素[[13], [23]] 判断一个数组是否存在于另一个大数组内 直接使用==会逐数字判断元素是否存在：
import numpy as np a = np.array([[1, 2, 3], [2, 3, 4]]) print(a == np.array([1, 2, 3])) 可以改为(a == np.array([1, 2, 3])).all(1).any()。y == z会将y的每一行与z的每个元素进行比较。 使用all(axis=1)可以获取所有元素匹配的行，并使用any()找出是否匹配。
import numpy as np a = np.array([[1, 2, 3], [2, 3, 4]]) print(a == np.</description></item><item><title>Python 学习随记</title><link>https://comfluter.life/p/python-%E5%AD%A6%E4%B9%A0%E9%9A%8F%E8%AE%B0/</link><pubDate>Mon, 22 Nov 2021 00:00:00 +0000</pubDate><guid>https://comfluter.life/p/python-%E5%AD%A6%E4%B9%A0%E9%9A%8F%E8%AE%B0/</guid><description>Python Module Python Module 导入方法 import &amp;lt;module name&amp;gt;调用这个方法导入的module中的函数时，需要&amp;lt;module name&amp;gt;.&amp;lt;function name&amp;gt;格式进行使用 from &amp;lt;module name&amp;gt; import &amp;lt;sth&amp;gt;从某个模块中引入某些特殊函数等引入现在所在的全局命名空间中，直接使用&amp;lt;sth&amp;gt;就可以进行使用。这里引入的可以是一个子包，也可以是子包中的任意对象。 from &amp;lt;module name&amp;gt; import *将模块中所有对象引入，直接使用原模块中的名称即可使用 搜索路径 导入一个模块时，Python 解析器对模块位置的搜索顺序是：
当前目录 如果不在当前目录，Python 则搜索在 shell 变量 PYTHONPATH 下的每个目录。 如果都找不到，Python会察看默认路径。UNIX下，默认路径一般为/usr/local/lib/python/。 模块搜索路径存储在 system 模块的 sys.path 变量中。变量里包含当前目录，PYTHONPATH和由安装过程决定的默认目录。 命名空间和作用域 变量：名字与匹配对象的对应 命名空间：记录了所有名字-对象对应关系的字典 python表达式可以访问全局/局部命名空间，重名时局部命名空间优先。 使用global语句可以告诉python变量属于全局变量。ex.global x
导入本地自定义包 文件结构
main.py package |--__init__.py |--module1.py |--module2.py 包是一个分层次的文件目录结构，它定义了一个由模块及子包，和子包下的子包等组成的 Python 的应用环境。
简单来说，包就是文件夹，但该文件夹下必须存在__init__.py 文件, 该文件的内容可以为空。__init__.py 用于标识当前文件夹是一个包。
假设module1.py中有函数func1()，则在main函数中可以使用以下集中方式进行包导入：
import mymodule.module1此时对应func1()的调用为mymodule.module1.func1()，前缀较长，比较繁琐。 import mymodule.module1 as m1此时对应func1()的调用为m1.func1() from mymodule import module1此时对应func1()的调用为module1.</description></item></channel></rss>