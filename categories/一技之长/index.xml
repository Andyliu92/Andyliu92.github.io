<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>一技之长 on 知止堂</title><link>https://comfluter.life/categories/%E4%B8%80%E6%8A%80%E4%B9%8B%E9%95%BF/</link><description>Recent content in 一技之长 on 知止堂</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 30 Nov 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://comfluter.life/categories/%E4%B8%80%E6%8A%80%E4%B9%8B%E9%95%BF/index.xml" rel="self" type="application/rss+xml"/><item><title>Anaconda使用随记</title><link>https://comfluter.life/p/anaconda%E4%BD%BF%E7%94%A8%E9%9A%8F%E8%AE%B0/</link><pubDate>Tue, 30 Nov 2021 00:00:00 +0000</pubDate><guid>https://comfluter.life/p/anaconda%E4%BD%BF%E7%94%A8%E9%9A%8F%E8%AE%B0/</guid><description>基本命令 创建虚拟环境：conda create -n &amp;lt;env_name&amp;gt; python=X.X 激活虚拟环境：conda activate &amp;lt;env_name&amp;gt; Minutiae unable auto activate base: conda config --set auto_activate_base false</description></item><item><title>Nginx 服务器配置子域名</title><link>https://comfluter.life/p/nginx-%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE%E5%AD%90%E5%9F%9F%E5%90%8D/</link><pubDate>Sun, 28 Nov 2021 00:00:00 +0000</pubDate><guid>https://comfluter.life/p/nginx-%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE%E5%AD%90%E5%9F%9F%E5%90%8D/</guid><description>添加域名解析 到腾讯云服务器控制台，添加需要解析的子域名，如下图。图中第一个参数“主机记录”即为子域名名称。
配置Nginx server { # 端口设置 listen 80; # 二级域名设置 server_name ling.comfluter.life; # 301重定向设置 return 301 http://47.102.150.182/; } 增加一项二级域名设置即可。</description></item><item><title>树莓派配置NAS</title><link>https://comfluter.life/p/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AEnas/</link><pubDate>Sun, 28 Nov 2021 00:00:00 +0000</pubDate><guid>https://comfluter.life/p/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AEnas/</guid><description>挂载NTFS格式磁盘 貌似树莓派OS能够自动挂载NTFS磁盘到/media/pi下。不用额外操作。
使用SAMBA协议提供校园网内文件服务 安装SAMBA 安装SAMBA：sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install -y samba
查看SAMBA版本：
root@raspberrypi:/media/pi/4T存储# samba --version Version 4.13.13-Debian</description></item><item><title>Including Verilog Code Block in Latex</title><link>https://comfluter.life/p/including-verilog-code-block-in-latex/</link><pubDate>Fri, 26 Nov 2021 00:00:00 +0000</pubDate><guid>https://comfluter.life/p/including-verilog-code-block-in-latex/</guid><description>include packages for code block and coloring
\usepackage{listings} \usepackage{xcolor} insert following codes for defining verilog code coloring tactic. It should be inserted at the head field of the latex file (before \begin{document}).
% for verilog code coloring \definecolor{vgreen}{RGB}{104,180,104} \definecolor{vblue}{RGB}{49,49,255} \definecolor{vorange}{RGB}{255,143,102} \lstdefinestyle{verilog-style} { language=Verilog, basicstyle=\small\ttfamily, keywordstyle=\color{vblue}, identifierstyle=\color{black}, commentstyle=\color{vgreen}, numbers=left, numberstyle=\tiny\color{black}, numbersep=10pt, tabsize=8, moredelim=*[s][\colorIndex]{[}{]}, literate=*{:}{:}1 } \makeatletter \newcommand*\@lbracket{[} \newcommand*\@rbracket{]} \newcommand*\@colon{:} \newcommand*\colorIndex{% \edef\@temp{\the\lst@token}% \ifx\@temp\@lbracket \color{black}% \else\ifx\@temp\@rbracket \color{black}% \else\ifx\@temp\@colon \color{black}% \else \color{vorange}% \fi\fi\fi } \makeatother \usepackage{trace} Insert your verilog code block using following codes:</description></item><item><title>Pyspice 学习随记</title><link>https://comfluter.life/p/pyspice-%E5%AD%A6%E4%B9%A0%E9%9A%8F%E8%AE%B0/</link><pubDate>Fri, 26 Nov 2021 00:00:00 +0000</pubDate><guid>https://comfluter.life/p/pyspice-%E5%AD%A6%E4%B9%A0%E9%9A%8F%E8%AE%B0/</guid><description>References PySpice: 使用ngspice进行电路仿真分析-1：安装 PySpice: 使用ngspice进行电路仿真分析-2：ngspice简要介绍-输入文件格式1</description></item><item><title>Linux 学习随记</title><link>https://comfluter.life/p/linux-%E5%AD%A6%E4%B9%A0%E9%9A%8F%E8%AE%B0/</link><pubDate>Thu, 25 Nov 2021 00:00:00 +0000</pubDate><guid>https://comfluter.life/p/linux-%E5%AD%A6%E4%B9%A0%E9%9A%8F%E8%AE%B0/</guid><description>开启root账户并配置SSH登录 修改root密码 sudo passwd root 修改SSH配置 sudo vi /etc/ssh/sshd_config 找到选项PermitRootLogin，将其前面的#去掉，即可使用SSH登录。若将后面的prohibit-password改为yes则可使用密码登录。 如果不选择密码登录，还需要通过其他账户登录，将authorized_keys复制到root账户的.ssh文件夹/root/.ssh下 Minutiae 使用taskset命令限定Linux下CPU逻辑核的使用对象及个数 linux下如何查看多核负载情况 LINUX下查看CPU使用率的命令</description></item><item><title>博客评论功能搭建</title><link>https://comfluter.life/p/%E5%8D%9A%E5%AE%A2%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD%E6%90%AD%E5%BB%BA/</link><pubDate>Thu, 25 Nov 2021 00:00:00 +0000</pubDate><guid>https://comfluter.life/p/%E5%8D%9A%E5%AE%A2%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD%E6%90%AD%E5%BB%BA/</guid><description>在王凯师兄的推荐下，使用gitalk搭建博客评论功能。
Github上申请OAuth application 登录github 在Settings页面选择Developer settings选项。 在Developer settings选择OAuth Apps,然后会在页面右边有一个New OAuth App按钮，点击这个按钮就进入到新建OAuth application页面 填写新建OAuth application相关信息： Application name：新建应用的名称 Homepage URL：The full URL to your application homepage. eg.https://comfluter.life/ Application description：对新建应用的描述 Authorization callback URL：回调链接，与Homepage URL保持一致即可。 注：这些参数可以在以后修改 点击注册应用，就可以看到Client ID，可以新建一个Client Secret Hugo 配置 使用stack主题，在配置文件config.yaml中已经预留了相关字段。
复制填写刚生成的Client ID，Client Secret。 repo: 类型：字符串，必填，github上的仓库名字，用于存放Gitalk评论 owner: 类型：字符串，必填，github仓库的所有者的名字 admin: 类型：数组(元素是字符串)，必填，github仓库的所有者和合作者 (对这个 repository 有写权限的用户)。如果仓库有多个人可以操作，那么在这里以数组形式写出：['someone'] Debugging Error: Not Found. 尝试了修改Homepage URL为github pages页面，发现并没有用。
解决：存放评论的repo不能为private属性. 应该是一个public的代码库才可以使用Gitalk！
References Gitalk评论插件使用教程</description></item><item><title>Verilog with vscode</title><link>https://comfluter.life/p/verilog-with-vscode/</link><pubDate>Wed, 24 Nov 2021 00:00:00 +0000</pubDate><guid>https://comfluter.life/p/verilog-with-vscode/</guid><description>linting using vscode extension Verilog-HDL/SystemVerilog/Bluespec SystemVerilog.
using iverilog
go to extension settings and set verilog &amp;gt; linting : linter = iverilog
then the linting function should work for verilog files.
Notice:
the dir to verilog file should not contain chinese characters and spaces. if you imported module from other file without include command, iverilog willl report an error. As it is always the case when using vivado, add -i to extention setting Verilog › Linting › Iverilog: Arguments to ignore this error.</description></item><item><title>Vivado 学习随记</title><link>https://comfluter.life/p/vivado-%E5%AD%A6%E4%B9%A0%E9%9A%8F%E8%AE%B0/</link><pubDate>Wed, 24 Nov 2021 00:00:00 +0000</pubDate><guid>https://comfluter.life/p/vivado-%E5%AD%A6%E4%B9%A0%E9%9A%8F%E8%AE%B0/</guid><description>Multi-module Project Just write two verilog files and instantiate a module specified in the other file, the vivado will figure out the dependencies automatically.</description></item><item><title>Numpy 学习随记</title><link>https://comfluter.life/p/numpy-%E5%AD%A6%E4%B9%A0%E9%9A%8F%E8%AE%B0/</link><pubDate>Mon, 22 Nov 2021 00:00:00 +0000</pubDate><guid>https://comfluter.life/p/numpy-%E5%AD%A6%E4%B9%A0%E9%9A%8F%E8%AE%B0/</guid><description>数组切片 import numpy as np a = np.array([[11, 12, 13], [21, 22, 23]], [31, 32, 33]) 注意Numpy中元素编号从0开始，左侧包含右侧不包含
取单个元素x = a[1, 2]，对应第0维的第1个元素4 切片x = a[0:2, 1:3]，对应第0维的第0~1个元素，第1维的第1~2个元素[[12 13], [22 23]] 切片x = a[:2, 2:]，对应对应第0维的最开始到第2（2-1）个元素，第1维的第2个及以后的所有元素[[13], [23]] 判断一个数组是否存在于另一个大数组内 直接使用==会逐数字判断元素是否存在：
import numpy as np a = np.array([[1, 2, 3], [2, 3, 4]]) print(a == np.array([1, 2, 3])) 可以改为(a == np.array([1, 2, 3])).all(1).any()。y == z会将y的每一行与z的每个元素进行比较。 使用all(axis=1)可以获取所有元素匹配的行，并使用any()找出是否匹配。
import numpy as np a = np.array([[1, 2, 3], [2, 3, 4]]) print(a == np.</description></item><item><title>PlantUML 学习随记</title><link>https://comfluter.life/p/plantuml-%E5%AD%A6%E4%B9%A0%E9%9A%8F%E8%AE%B0/</link><pubDate>Mon, 22 Nov 2021 00:00:00 +0000</pubDate><guid>https://comfluter.life/p/plantuml-%E5%AD%A6%E4%B9%A0%E9%9A%8F%E8%AE%B0/</guid><description>PlantUML with VsCode Install PlantUML extension for vscode. following extension follow me document: install java JRE install Graphviz download the latest plantuml.jar specify the jar location with the extension setting plantuml.jar specify the GraphViz installation by defining the Windows environment variable GRAPHVIZ_DOT, e.g., c:\program files\graphviz\bin\dot.exe</description></item><item><title>Python 学习随记</title><link>https://comfluter.life/p/python-%E5%AD%A6%E4%B9%A0%E9%9A%8F%E8%AE%B0/</link><pubDate>Mon, 22 Nov 2021 00:00:00 +0000</pubDate><guid>https://comfluter.life/p/python-%E5%AD%A6%E4%B9%A0%E9%9A%8F%E8%AE%B0/</guid><description>Python Module Python Module 导入方法 import &amp;lt;module name&amp;gt;调用这个方法导入的module中的函数时，需要&amp;lt;module name&amp;gt;.&amp;lt;function name&amp;gt;格式进行使用 from &amp;lt;module name&amp;gt; import &amp;lt;sth&amp;gt;从某个模块中引入某些特殊函数等引入现在所在的全局命名空间中，直接使用&amp;lt;sth&amp;gt;就可以进行使用。这里引入的可以是一个子包，也可以是子包中的任意对象。 from &amp;lt;module name&amp;gt; import *将模块中所有对象引入，直接使用原模块中的名称即可使用 搜索路径 导入一个模块时，Python 解析器对模块位置的搜索顺序是：
当前目录 如果不在当前目录，Python 则搜索在 shell 变量 PYTHONPATH 下的每个目录。 如果都找不到，Python会察看默认路径。UNIX下，默认路径一般为/usr/local/lib/python/。 模块搜索路径存储在 system 模块的 sys.path 变量中。变量里包含当前目录，PYTHONPATH和由安装过程决定的默认目录。 命名空间和作用域 变量：名字与匹配对象的对应 命名空间：记录了所有名字-对象对应关系的字典 python表达式可以访问全局/局部命名空间，重名时局部命名空间优先。 使用global语句可以告诉python变量属于全局变量。ex.global x
导入本地自定义包 文件结构
main.py package |--__init__.py |--module1.py |--module2.py 包是一个分层次的文件目录结构，它定义了一个由模块及子包，和子包下的子包等组成的 Python 的应用环境。
简单来说，包就是文件夹，但该文件夹下必须存在__init__.py 文件, 该文件的内容可以为空。__init__.py 用于标识当前文件夹是一个包。
假设module1.py中有函数func1()，则在main函数中可以使用以下集中方式进行包导入：
import mymodule.module1此时对应func1()的调用为mymodule.module1.func1()，前缀较长，比较繁琐。 import mymodule.module1 as m1此时对应func1()的调用为m1.func1() from mymodule import module1此时对应func1()的调用为module1.</description></item><item><title>在Nginx服务器上部署SSL证书</title><link>https://comfluter.life/p/%E5%9C%A8nginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E9%83%A8%E7%BD%B2ssl%E8%AF%81%E4%B9%A6/</link><pubDate>Sun, 21 Nov 2021 00:00:00 +0000</pubDate><guid>https://comfluter.life/p/%E5%9C%A8nginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E9%83%A8%E7%BD%B2ssl%E8%AF%81%E4%B9%A6/</guid><description>申请证书 在腾讯云SSL证书界面申请即可，过程很快，十分钟就通知证书申请成功。
下载证书并上传至云服务器 在腾讯云SSL证书面板，找到要部署网站的证书，点击右侧的下载按钮即可下载
SSL证书面板
zip包文件结构：
zip_struct
由于使用Nginx服务器，需要使用的文件全部放在Nginx文件夹下：
将这两个文件复制到服务器Nginx安装路径下，我服务器上的安装路径为/etc/nginx：
root@VM-24-3-ubuntu:/# mv /home/ubuntu/download/1_comfluter.life_bundle.crt /etc/nginx root@VM-24-3-ubuntu:/# mv /home/ubuntu/download/2_comfluter.life.key /etc/nginx root@VM-24-3-ubuntu:/# cd /etc/nginx root@VM-24-3-ubuntu:/etc/nginx# ll -s total 80 4 drwxr-xr-x 8 root root 4096 Nov 21 10:05 ./ 4 drwxr-xr-x 115 root root 4096 Nov 15 15:50 ../ 4 -rw-rw-r-- 1 ubuntu ubuntu 3921 Nov 21 08:37 1_comfluter.life_bundle.crt 4 -rw-rw-r-- 1 ubuntu ubuntu 1700 Nov 21 08:37 2_comfluter.</description></item></channel></rss>